import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_modular/flutter_modular.dart';
import 'package:safe_notes/app/design/common/common.dart';
import 'package:safe_notes/app/shared/database/models/note_model.dart';
import 'package:safe_notes/app/shared/database/views/folder_qtd_child_view.dart';
import 'package:safe_notes/app/design/widgets/textfield/custom_textfield_title_note.dart';

import 'add_or_edit_note_controller.dart';
import 'enum/mode_note_enum.dart';

class AddOrEditNotePage extends StatefulWidget {
  final ModeNoteEnum mode;

  final NoteModel note;
  final FolderQtdChildView folder;

  const AddOrEditNotePage({
    Key? key,
    required this.mode,
    required this.note,
    required this.folder,
  }) : super(key: key);

  @override
  State<AddOrEditNotePage> createState() => _AddOrEditNotePageState();
}

class _AddOrEditNotePageState extends State<AddOrEditNotePage> {
  TextEditingController? _editingControllerTitle;
  TextEditingController? _editingControllerBody;
  late AddOrEditNoteController _controller;

  int _maxLines = 0;
  bool _isExpanded = false;
  late FocusNode _focusNode;

  void _setExpansion(bool shouldBeExpanded) {
    if (shouldBeExpanded != _isExpanded) {
      setState(() {
        _isExpanded = shouldBeExpanded;
      });
    }
  }

  void _toggleExpansion() {
    _setExpansion(!_isExpanded);
  }

  void removeFocusTitle() {
    _toggleExpansion();
    _focusNode.requestFocus();
  }

  Widget? infoNote;

  initialConfig() {
    var infoFolder = Row(
      mainAxisAlignment: MainAxisAlignment.start,
      crossAxisAlignment: CrossAxisAlignment.center,
      children: [
        Icon(
          Icons.folder_outlined,
          color: Color(widget.folder.color),
        ),
        const SizedBox(width: 6.0),
        Padding(
          padding: const EdgeInsets.only(top: 4.0),
          child: Text(
            widget.folder.name,
            style: TextStyles.cardTitleFolder,
          ),
        ),
      ],
    );
    if (widget.mode == ModeNoteEnum.edit) {
      infoNote = Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          infoFolder,
          const SizedBox(height: 8.0),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'Última modificação: ' +
                    widget.note.dateModification.toStrDateTime,
                style: TextStyle(
                  fontSize: 11,
                  color: ColorPalettes.grey,
                ),
              ),
              const SizedBox(height: 1.0),
              Text(
                'Criado: ' + widget.note.dateCreate.toStrDate,
                style: TextStyle(
                  fontSize: 11,
                  color: ColorPalettes.grey,
                ),
              ),
            ],
          ),
          const SizedBox(height: 6.0),
        ],
      );
    } else {
      infoNote = infoFolder;
    }
  }

  @override
  void initState() {
    super.initState();
    initialConfig();
    _focusNode = FocusNode()..requestFocus();
    _controller = Modular.get<AddOrEditNoteController>();

    _controller.noteModel = widget.note;
    _controller.folderId = widget.folder.id;
    if (widget.mode == ModeNoteEnum.edit) {
      _editingControllerTitle = TextEditingController(
        text: widget.note.title,
      );
      _editingControllerBody = TextEditingController(
        text: widget.note.body,
      );
      _controller.alreadySaved = true;
    } else {
      _controller.alreadySaved = false;
    }
  }

  @override
  void dispose() {
    _editingControllerTitle?.dispose();
    _editingControllerBody?.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    _maxLines = Sizes.heightKeyboard(context) > 0
        ? 50
        : (Sizes.height(context) * 0.05).toInt() + 2;
    print(_maxLines);

    return WillPopScope(
      onWillPop: () async {
        if (_isExpanded) {
          removeFocusTitle();
          return false;
        }
        if (widget.mode == ModeNoteEnum.add) {
          if (_controller.alreadySaved) {
            await _controller.delete();
          }
        }
        return true;
      },
      child: Scaffold(
        body: Column(
          children: [
            Padding(
              padding: EdgeInsets.only(
                top: Sizes.heightStatusBar(context),
              ),
              child: CustomTextFieldTitleNote(
                controller: _editingControllerTitle,
                heightExpanded: widget.mode == ModeNoteEnum.add ? 135.0 : 160.0,
                expanded: _isExpanded,
                childDetails: infoNote,
                onChanged: (text) {
                  _controller.onChangedTitle(context, text);
                },
                onTapTextField: () {
                  if (!_isExpanded) {
                    _toggleExpansion();
                  }
                },
                onTapIcon: () {
                  if (_isExpanded) {
                    removeFocusTitle();
                  } else {
                    Modular.to.pop();
                  }
                },
              ),
            ),
            Expanded(
              // color: Colors.amber,
              // width: Sizes.width(context),
              // height: Sizes.height(context) * 0.875,
              // child: ListView(
              //   padding: EdgeInsets.zero,
              //   children: [
              child: SingleChildScrollView(
                physics:
                    _isExpanded ? const NeverScrollableScrollPhysics() : null,
                child: Stack(
                  alignment: Alignment.topCenter,
                  children: [
                    Padding(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 1.0,
                      ),
                      child: Align(
                        alignment: Alignment.topCenter,
                        child: RawScrollbar(
                          thickness: 5,
                          radius: const Radius.circular(20),
                          child: TextField(
                            controller: _editingControllerBody,
                            focusNode: _focusNode,
                            maxLines: _maxLines,
                            // maxLines: Sizes.height(context).toInt(),
                            // maxLength: 500,
                            inputFormatters: [
                              LengthLimitingTextInputFormatter(4903),
                            ],
                            onChanged: (text) {
                              _controller.onChangedBody(context, text);
                            },
                            decoration: const InputDecoration(
                              contentPadding: EdgeInsets.all(12.0),
                              border: InputBorder.none,
                            ),
                          ),
                        ),
                      ),
                    ),
                    if (_isExpanded)
                      GestureDetector(
                        onTap: () {
                          removeFocusTitle();
                        },
                        child: Container(
                          width: Sizes.width(context),
                          height: Sizes.height(context),
                          color: Colors.black12,
                        ),
                      ),
                    //         ],
                    //       ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget widgetAddTitle(BuildContext context) {
    return CustomTextFieldTitleNote(
      controller: _editingControllerTitle,
      // heightExpanded: widget.mode == ModeNoteEnum.add ? 135.0 : 155.0,
      heightExpanded: 135.0,
      expanded: _isExpanded,
      childDetails: infoNote,
      onChanged: (text) {
        _controller.onChangedTitle(context, text);
      },
      onTapTextField: () {
        if (!_isExpanded) {
          _toggleExpansion();
        }
      },
      onTapIcon: () {
        if (_isExpanded) {
          removeFocusTitle();
        } else {
          Modular.to.pop();
        }
      },
    );
  }

  Widget widgetEditTitle(BuildContext context) {
    return CustomTextFieldTitleNote(
      controller: _editingControllerTitle,
      heightExpanded: 160.0,
      expanded: _isExpanded,
      childDetails: infoNote,
      onChanged: (text) {
        _controller.onChangedTitle(context, text);
      },
      onTapTextField: () {
        if (!_isExpanded) {
          _toggleExpansion();
        }
      },
      onTapIcon: () {
        if (_isExpanded) {
          removeFocusTitle();
        } else {
          Modular.to.pop();
        }
      },
    );
  }
}
